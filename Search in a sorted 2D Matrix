class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int m=matrix.size();//no of rows
        int n=matrix[0].size();//no of columns
        int i=0;
        int j=n-1;
//first row ke last element se shuru karenge
        while(i>=0&&i<m&&j>=0&&j<n)
        {
            if(matrix[i][j]==target)
            return true;
            else if(matrix[i][j]>target)//to left hand side move karenge
            j--;
            else//kam ho gya to downwards movement
            i++;
        }
        return false;
    }
};


You are given an m x n integer matrix matrix with the following two properties:

Each row is sorted in non-decreasing order.
The first integer of each row is greater than the last integer of the previous row.
Given an integer target, return true if target is in matrix or false otherwise.

You must write a solution in O(log(m * n)) time complexity.

 

Example 1:


Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true
Example 2:


Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
Output: false
