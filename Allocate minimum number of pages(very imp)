//{ Driver Code Starts
// Initial template for C++

#include<bits/stdc++.h>
using namespace std;


//Three essential conditions-
Continuous allocation
Each child should read atleast one book
A book cant be divided
Each child should read min pages

class Solution 
{
    public:
    int acc(int A[],int N,int K,int mid)
    {
        int s=1;//no of student count karne ke liy
        int sum=0;
        for(int i=0;i<N;i++)
        {
            sum+=A[i];
            if(sum>mid)
            {
            s+=1;
            sum=A[i];//start for 2nd srudent
        }
        if(s>K)
        return false;
        
    }
        
        return true;
    }
    //Function to find minimum number of pages.
    int findPages(int A[], int N, int M) 
    {if(N<M)//agar book kam hai bachhe jyada hai
    return -1;
        //code here
        int start=*max_element(A, A + N);//kyunki har bachha 1 book to padegha hi to max se allocate akdenge to optimized rahega
        
        int initial_sum = 0,res;
    int end=accumulate(A, A+N, initial_sum);//sum of array(pages)
    while(start<=end)
    {int mid=start+(end-start)/2;
        if(acc(A,N,M,mid)==true)
        {
            res=mid;
            end=mid-1;//or accurate find karne ke liy
        }
        else
        start=mid+1;
    }
    return res;//pages return
    }
};

You have N books, each with Ai number of pages. M students need to be allocated contiguous books, with each student getting at least one book. Out of all the permutations, the goal is to find the permutation where the student with the most books allocated to him gets the minimum number of pages, out of all possible permutations.

Note: Return -1 if a valid assignment is not possible, and allotment should be in contiguous order (see the explanation for better understanding).

 

Example 1:

Input:
N = 4
A[] = {12,34,67,90}
M = 2
Output:113
Explanation:Allocation can be done in 
following ways:
{12} and {34, 67, 90} Maximum Pages = 191
{12, 34} and {67, 90} Maximum Pages = 157
{12, 34, 67} and {90} Maximum Pages =113.
Therefore, the minimum of these cases is 113,
which is selected as the output.

Example 2:

Input:
N = 3
A[] = {15,17,20}
M = 2
Output:32
Explanation: Allocation is done as
{15,17} and {20}
