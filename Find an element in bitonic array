#include <bits/stdc++.h>

using namespace std;
class Solution{
public:	
	// Function to find length of longest bitonic
	// subarray
int findKRotation(vector<int>&arr,int n) {//for finding the bitonic point means peak element
       
        int l=1,r=n-2;
        
        if(n==1)
        return 0;
        if(arr[0]>arr[1])
            return 0;
            
             if(arr[n-1]>arr[n-2])
            return n-1;
        while(l<=r)
        {
            int mid=l+(r-l)/2;
            
            
            
            if(mid>0&&mid<n-1)//taaki jo side ki condition hai vo baad me check krr sake , usme 1 hi se compare karna padta hai
            {
            if(arr[mid]>=arr[mid-1]&&arr[mid]>=arr[mid+1])
            return mid;
            else if(arr[mid+1]>arr[mid])
            l=mid+1;
            else
            r=mid-1;}
            

        }
       return 0; 
        
        // Array is not rotated, so rotation point is at 0
    }
int bsearch(vector<int>& nums, int target,int start,int end){//binary search for left hand side ascending array
    
    while(start<=end){
        int mid=start+(end-start)/2;
        if(nums[mid]==target)
        return mid;
        else if (target<nums[mid])
        end=mid-1;
        else
        start=mid+1;
    }
    return -1;
}
int bs(vector<int>& nums, int target,int start,int end){//binary search for right hand side descending array
    
    while(start<=end){
        int mid=start+(end-start)/2;
        if(nums[mid]==target)
        return mid;
        else if (target<nums[mid])
        start=mid+1;
        else
        end=mid-1;
    }
    return -1;
}
    int search(vector<int>& nums, int target) {
int n=nums.size();

        int m=findKRotation(nums,n);
        int y=bsearch(nums,target,0,m-1);
        int z=bs(nums,target,m,n-1);
if (y != -1)
            return y;
        else if (z != -1)
        return z;
        else
            return -1;
       
    }
};
int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        int target;
        cin>>target;
        vector<int> arr(n);
        for (int i = 0; i < n; i++) {
            cin >> arr[i];
        }
        Solution ob;
        auto ans = ob.search(arr,target);
        cout << ans << "\n";
    }
    return 0;
}
