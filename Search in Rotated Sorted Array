class Solution {
public:
int findKRotation(vector<int>arr, int n) {//returns index of smallest no
        int start = 0, end = n - 1;
        while (start < end) {
            int mid = start + (end - start) / 2;
            if (arr[mid] > arr[mid + 1]) {//arr[mid] is the largest element
                return mid + 1; // Found the rotation point (pivot)
            } else if (arr[start] <= arr[mid]) {
                start = mid + 1;
            } else {
                end = mid;
            }
        }
        return 0; // Array is not rotated, so rotation point is at 0
    }
int bsearch(vector<int>& nums, int target,int start,int end){
    
    while(start<=end){
        int mid=start+(end-start)/2;
        if(nums[mid]==target)
        return mid;
        else if (target<nums[mid])
        end=mid-1;
        else
        start=mid+1;
    }
    return -1;
}
    int search(vector<int>& nums, int target) {
int n=nums.size();

        int m=findKRotation(nums,n);
        int y=bsearch(nums,target,0,m-1);
        int z=bsearch(nums,target,m,n-1);
if (y != -1)
            return y;
        else if (z != -1)
            return z;
        else
            return -1;
       
    }
};

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
