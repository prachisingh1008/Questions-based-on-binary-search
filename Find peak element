class Solution {
public:
    int findPeakElement(vector<int>& nums) {
        int l=0,r=nums.size()-1;
        int n=nums.size();
        if(n==1)
        return 0;
        while(l<=r)
        {
            int mid=l+(r-l)/2;
            if(mid>0&&mid<n-1)//taaki jo side ki condition hai vo baad me check krr sake , usme 1 hi se compare karna padta hai
            {
            if(nums[mid]>nums[mid-1]&&nums[mid]>nums[mid+1])
            return mid;
            else if(nums[mid+1]>nums[mid])
            l=mid+1;
            else
            r=mid-1;}
            else if(mid==0)//side condition
            {
            if(nums[0]>nums[1])
            return 0;
            else
            return 1;}
            else if(mid==n-1)//side condition
            {
             if(nums[n-1]>nums[n-2])
            return n-1;
            else
            return n-2;} 

        }
       return -1; 
    }
};

//bitonic array me bhi yahi code lag sakta haii maximum find karne ke liy , usme pehle array in hoga then after certain point array decrease hoga
Input: 
n = 9
arr[] = {1,15,25,45,42,21,17,12,11}
Output: 45
Explanation: Maximum element is 45.
Example 2:

Input: 
n = 5
arr[] = {1, 45, 47, 50, 5}
Output: 50
Explanation: Maximum element is 50.
